
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'dart:async';
import 'package:record/record.dart';
import 'package:path_provider/path_provider.dart';

class AudioWaveformRecorder extends StatefulWidget {
  const AudioWaveformRecorder({
    super.key,
    this.width,
    this.height,
    required this.onStart,
    required this.onStop,
    required this.accentColor,
    this.startButton,
    this.stopButton,
  });

  final double? width;
  final double? height;
  final Future Function() onStart;
  final Future Function() onStop;
  final Color accentColor;
  final Widget Function()? startButton;
  final Widget Function()? stopButton;

  @override
  State<AudioWaveformRecorder> createState() => _AudioWaveformRecorderState();
}

class _AudioWaveformRecorderState extends State<AudioWaveformRecorder> {
  static const int bufferLength = 120;
  static const double waveformHeight = 75.0;

  final AudioRecorder _recorder = AudioRecorder();
  List<double> _amplitudes = List.generate(bufferLength, (_) => 0.0);
  Timer? _pollingTimer;
  bool _recorderStarted = false;

  @override
  void initState() {
    super.initState();
    if (FFAppState().recording) {
      _startAmplitudeStream();
    }
  }

  @override
  void didUpdateWidget(covariant AudioWaveformRecorder oldWidget) {
    super.didUpdateWidget(oldWidget);

    if (FFAppState().recording && !_recorderStarted) {
      _startAmplitudeStream();
    } else if (!FFAppState().recording && _recorderStarted) {
      _stop();
    }
  }

  @override
  void dispose() {
    _pollingTimer?.cancel();
    _recorder.stop();
    super.dispose();
  }

  Future<void> _startAmplitudeStream() async {
    final hasPermission = await _recorder.hasPermission();
    if (!hasPermission) return;

    final dir = await getTemporaryDirectory();
    final filePath = '${dir.path}/temp_waveform.wav';

    await _recorder.start(
      const RecordConfig(encoder: AudioEncoder.wav),
      path: filePath,
    );

    setState(() => _recorderStarted = true);

    _pollingTimer =
        Timer.periodic(const Duration(milliseconds: 100), (_) async {
      final amp = await _recorder.getAmplitude();
      double normalized = 0.0;

      if (amp != null && amp.current != double.negativeInfinity) {
        normalized = _normalizeDb(amp.current);
        if (normalized < 0.1) normalized = 0.0;
      }

      setState(() {
        _amplitudes.add(normalized);
        if (_amplitudes.length > bufferLength) {
          _amplitudes.removeAt(0);
        }
      });
    });
  }

  Future<void> _stop() async {
    _pollingTimer?.cancel();
    await _recorder.stop();
    setState(() {
      _recorderStarted = false;
      _amplitudes = List.generate(bufferLength, (_) => 0.0);
    });
  }

  double _normalizeDb(double db) {
    final clamped = db.clamp(-90.0, 0.0);
    return (clamped + 90) / 90;
  }

  Widget _defaultStartButton() {
    return Container(
      width: widget.width ?? 100,
      height: widget.height ?? 100,
      decoration: BoxDecoration(
        color: widget.accentColor.withOpacity(0.1),
        shape: BoxShape.circle,
        border: Border.all(color: widget.accentColor, width: 3),
      ),
      child: Center(
        child: Icon(Icons.mic, size: 40, color: widget.accentColor),
      ),
    );
  }

  Widget _defaultStopButton() {
    return Container(
      width: 64,
      height: 64,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: widget.accentColor,
        border: Border.all(color: Colors.white.withOpacity(0.1), width: 2),
      ),
      child: const Center(
        child: Icon(Icons.stop, color: Colors.white, size: 32),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final showWaveform = FFAppState().recording && _recorderStarted;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (!showWaveform)
          GestureDetector(
            onTap: () async => await widget.onStart(),
            child: widget.startButton != null
                ? widget.startButton!()
                : _defaultStartButton(),
          )
        else
          SizedBox(
            width: widget.width ?? double.infinity,
            height: waveformHeight,
            child: CustomPaint(
              painter: _WaveformPainter(_amplitudes, widget.accentColor),
            ),
          ),
        if (showWaveform) ...[
          const SizedBox(height: 12),
          GestureDetector(
            onTap: () async => await widget.onStop(),
            child: widget.stopButton != null
                ? widget.stopButton!()
                : _defaultStopButton(),
          ),
        ]
      ],
    );
  }
}

class _WaveformPainter extends CustomPainter {
  final List<double> amplitudes;
  final Color color;

  _WaveformPainter(this.amplitudes, this.color);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()..color = color;

    final centerY = size.height / 2;
    const minHeightRatio = 0.05;
    const spacing = 2.0; // space between bars
    const radius = Radius.circular(3);

    final totalSpacing = spacing * (amplitudes.length - 1);
    final availableWidth = size.width - totalSpacing;
    final barWidth = availableWidth / amplitudes.length;

    for (int i = 0; i < amplitudes.length; i++) {
      final x = i * (barWidth + spacing);
      final amp = amplitudes[i].clamp(0.0, 1.0);
      final height =
          (amp < minHeightRatio ? minHeightRatio : amp) * size.height;

      final rrect = RRect.fromRectAndRadius(
        Rect.fromCenter(
          center: Offset(x, centerY),
          width: barWidth,
          height: height,
        ),
        radius,
      );

      canvas.drawRRect(rrect, paint);
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => true;
}
